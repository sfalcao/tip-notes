#!/usr/bin/env bash
#===============================================================================
#
#   DESCRIPTION: terminal notes manager
# 
#         USAGE: ./tip --help
#                
#        AUTHOR: S. Falcao
#       CREATED: 11.07.2020 16:09

#===============================================================================

# Copyright (C) 2020 tip-notes authors.
#
# This file is part of tip-notes.
#
#     tip-notes is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     tip-notes is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with Foobar.  If not, see <https://www.gnu.org/licenses/>



#set -o errexit
set -o nounset
set -o pipefail
#set -o xtrace


#-------------------------------------------------------------------------------
# CONFIGURATION SECTION
#-------------------------------------------------------------------------------
#
script_name=$(basename "${0}")

link_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
linked_script=$(readlink "${link_dir}/${script_name}")
if [[ -z "${linked_script}" ]]; then
    executables_dir="${link_dir}"
else
    executables_dir=$(dirname "${linked_script}")
fi
# shellcheck source=./project-header.sh
source "${executables_dir}/project-header.sh"
# shellcheck source=./tip-lib.sh
source "${executables_dir}/tip-lib.sh"



# if exist a config file, source it, otherwise prints an error
# message, unless $1 is --config-init
if [[ -f "${HEADER___PROJECT_CONFIG_FILE}" ]]; then
    # shellcheck source=/home/falcao/.config/tip-notes/tiprc
    source "${HEADER___PROJECT_CONFIG_FILE}"
else
    if [[ "${#}" -eq 0 ]] || [[ "${1}" != '--init' ]]; then
        print_error "ERROR: --> configuration file does not exist!"
        exit 1
    fi
fi


#-------------------------------------------------------------------------------
# FUNCTIONS
#-------------------------------------------------------------------------------
#
function show_help(){
    echo
    echo \
        "${HEADER___PROJECT_NAME} "\
        "${HEADER___PROJECT_VERSION}"
    echo
    echo
    echo "USAGE:"
    echo
    echo \
        "${script_name}                                    "\
        "list all notes"
    echo \
        "${script_name} [<group>]                          "\
        "list all notes within the group"
    echo \
        "${script_name} [<group>/]<note>                   "\
        "list specific note"
    echo
    echo \
        "${script_name} --config                           "\
        "edit external configuration file"
    echo \
        "${script_name} --init                             "\
        "create an external configuration file"
    echo \
        "${script_name} --reset                            "\
        "reset external configuration file"
    echo
    echo \
        "${script_name} --backup                           "\
        "creates a backup according to tiprc configuration"
    echo \
        "${script_name} --backup --all                     "\
        "creates a backup containing notes and configurations"
    echo \
        "${script_name} --backup --config-only             "\
        "creates a backup containing configurations"
    echo \
        "${script_name} --backup --notes-only              "\
        "creates a backup containing notes"
    echo
    echo \
        "${script_name} --edit [<group>/]<note>            "\
        "add/edit note"
    echo \
        "${script_name} --delete [<group>/]<note>          "\
        "delete note"
    echo \
        "${script_name} --find [<group>] <text>            "\
        "find notes which name contains <text>"
    echo \
        "${script_name} --find-content [<group>] <text>    "\
        "find notes which contains <text>"
    echo
    echo \
        "${script_name} --remove                           "\
        "remove ${HEADER___PROJECT_NAME} from system"
    echo \
        "${script_name} --purge                            "\
        "remove ${HEADER___PROJECT_NAME} from system including"
    echo "                                       "\
        "configuration files and notes"
    echo
    echo \
        "${script_name} --version                          "\
        "shows ${HEADER___PROJECT_NAME} version"
    echo \
        "${script_name} --authors                          "\
        "shows ${HEADER___PROJECT_NAME} authors list"
    echo
    echo
    echo "SHORT FORMS:"
    echo
    echo "-b is same of --backup"
    echo "-d is same of --delete"
    echo "-e is same of --edit"
    echo "-f is same of --find"
    echo "-F is same of --find-content"
    echo "-h is same of --help"
    echo
    echo
    echo \
        "${script_name} --help                             "\
        "shows ${HEADER___PROJECT_NAME}'s help"
    echo
    return 0
}


#-------------------------------------------------------------------------------
# PARSING
#-------------------------------------------------------------------------------
#
POSITIONAL_ARGUMENTS=()



number_of_passed_options=0

backup_flag=0
edit_flag=0
delete_flag=0
find_by_content_flag=0
find_by_name_flag=0


while [[ ${#} -gt 0 ]]; do

    arg="$1"

    case ${arg} in

        # early quitting options
        '-h' | '--help')
            shift
            show_help
            exit 0
            ;;
        '--authors')
            if ! cat "${executables_dir}/authors"; then
                exit 1
            fi
            exit 0
            ;;
        '--config')
            if ! "${executables_dir}/config"; then
                exit 1
            fi
            exit 0
            ;;
        '--init')
            if ! "${executables_dir}/init"; then
                exit 1
            fi
            exit 0
            ;;
        '--reset')
            if ! "${executables_dir}/reset"; then
                exit 1
            fi
            exit 0
            ;;
        '--remove')
            if ! "${executables_dir}/remove"; then
                exit 1
            fi
            exit 0
            ;;
        '--purge')
            if ! "${executables_dir}/remove" '--purge'; then
                exit 1
            fi
            exit 0
            ;;
        '--version')
            echo "${HEADER___PROJECT_VERSION}"
            exit 0
            ;;

        # post processing options
        '-b' | '--backup')
            shift
            backup_flag=1
            let number_of_passed_options+=1
            ;;
        '-e' | '--edit')
            shift
            edit_flag=1
            let number_of_passed_options+=1
            ;;
        '-d' | '--delete')
            shift
            delete_flag=1
            let number_of_passed_options+=1
            ;;
        '-F' | '--find-content')
            shift
            find_by_content_flag=1
            let number_of_passed_options+=1
            ;;
        '-f' | '--find')
            shift
            find_by_name_flag=1
            let number_of_passed_options+=1
            ;;


        *)
            # unknown option
            # save it in an array for later
            POSITIONAL_ARGUMENTS+=("$1")
            shift # past argument
            ;;
    esac
done



# positional parameters are restored AUTOMATICALLY in order to be treated by the
# caller (DO NOT CHANGE BELLOW)
set -- "${POSITIONAL_ARGUMENTS[@]}"




#-------------------------------------------------------------------------------
# MAIN SECTION
#-------------------------------------------------------------------------------
#

if [[ "${number_of_passed_options}" -gt 1 ]]; then
    print_error "ERROR: too many options passed!"
    exit 1
fi



if [[ "${backup_flag}" -eq 1 ]]; then
    if ! "${executables_dir}/backup" "${@}"; then
        exit 1
    fi
    exit 0
elif [[ "${edit_flag}" -eq 1 ]]; then
    if ! "${executables_dir}/edit" "${@}"; then
        exit 1
    fi
    exit 0
elif [[ "${delete_flag}" -eq 1 ]]; then
    if ! "${executables_dir}/delete" "${@}"; then
        exit 1
    fi
    exit 0
elif [[ "${find_by_content_flag}" -eq 1 ]]; then
    if ! "${executables_dir}/find-notes-by-content" "${@}"; then
        exit 1
    fi
    exit 0
elif [[ "${find_by_name_flag}" -eq 1 ]]; then
    if ! "${executables_dir}/find-notes-by-name" "${@}"; then
        exit 1
    fi
    exit 0
fi




# if no notes folder creates one
if ! [[ -d "${RC___TIP_NOTES_FOLDER}" ]]; then
    mkdir "${RC___TIP_NOTES_FOLDER}"
fi

# if no arguments list available notes
if [[ "${#}" -eq 0 ]]; then
    # echo 'calling list-notes'
    "${executables_dir}/list-notes"
    exit 0
fi

# list notes
if [[ "${#}" -eq 1 ]]; then
    # if receives a folder list notes on it
    if [[ -d "${RC___TIP_NOTES_FOLDER}/${1}" ]]; then
        "${executables_dir}/list-notes" "${1}"
        exit 0
    # if receives a note shows it's content
    elif [[ -f "${RC___TIP_NOTES_FOLDER}/${1}" ]]; then
        more "${RC___TIP_NOTES_FOLDER}/${1}"
        exit 0
    fi

    print_error "ERROR: no tips for ${1}!"
    exit 1
fi

# should not reach here
print_error "ERROR: Unexpected condition!"
exit 1
