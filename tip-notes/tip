#!/usr/bin/env bash
#===============================================================================
#
#   DESCRIPTION: terminal notes manager
# 
#         USAGE: ./tip --help
#                
#        AUTHOR: S. Falcao
#       CREATED: 11.07.2020 16:09

#===============================================================================

set -o errexit
set -o nounset
set -o pipefail
#set -o xtrace


#-------------------------------------------------------------------------------
# CONFIGURATION SECTION
#-------------------------------------------------------------------------------
#
__script_name__="tip"

__link_dir__="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
__linked_script__=$(readlink "${__link_dir__}/${__script_name__}")
__project_dir__=$(dirname "${__linked_script__}")
cd ${__project_dir__}

source ./project-header.sh


# default condition for the case a config folder does not exist
tip_config_folder=~/.config/tip-notes
tip_config_file=${tip_config_folder}/tiprc
tip_notes_folder=~/.config/tip-notes/notes
tip_editor=''
tip_confirm_remove=true
tip_confirm_remove_purge=true

# if exist a config file, source it
if [[ -f "${tip_config_file}" ]]; then
    source "${tip_config_file}"
fi

# if doesn't exist a config folder create one
if ! [[ -d "${tip_config_folder}" ]]; then
    mkdir ${tip_config_folder}
fi

# if doesn't exist a notes folder create one
if ! [[ -d "${tip_notes_folder}" ]]; then
    mkdir ${tip_notes_folder}
fi


#-------------------------------------------------------------------------------
# FUNCTIONS
#-------------------------------------------------------------------------------
# use this section to store your functions
#
#

#####
# P #
#####
#

function print_if_not_silenced(){
    if [[ "$FLAG_SILENT" -eq "0" ]] ; then
        echo "$1"
        return "0"
    else
        return "1"
    fi
}


function print_if_verbose(){
    if [[ "$FLAG_VERBOSE" -eq "1" ]] ; then
        echo "$1"
        return 0
    else
        return 1
    fi
}



#-------------------------------------------------------------------------------
# PARSING
#-------------------------------------------------------------------------------
#
POSITIONAL_ARGUMENTS=()


VERBOSE_FLAG=0
SILENT_FLAG=0


while [[ ${#} -gt 0 ]]; do

    arg="$1"

    case ${arg} in
        '-s' | '--silent')
            SILENT_FLAG=1
            shift # past argument
            ;;

        '-v' | '--verbose')
            VERBOSE_FLAG=1
            shift # past argument
            ;;
        '-e' | '--edit')
            shift
            if [[ ${#} -ne 1 ]]; then
                echo "ERROR: --edit option waits for a note name"
                exit 1
            fi
            note_file="${tip_notes_folder}/${1}"
            if [[ -z "${tip_editor}" ]]; then
                if ! [[ -f "${note_file}" ]]; then
                    touch "${note_file}"
                fi
                xdg-open ${note_file}
            else
                ${tip_editor} "${note_file}"
            fi
            exit 0
            ;;
        '-d' | '--delete')
            shift
            if [[ ${#} -ne 1 ]]; then
                echo "ERROR: --delete option waits for a note name"
                exit 1
            fi
            note_file="${tip_notes_folder}/${1}"
            if [[ -f "${note_file}" ]]; then
                rm "${note_file}"
            else
                echo "no ${1} note to be removed!"
                exit 1
            fi
            exit 0
            ;;
        '--remove')
            if [ "${tip_confirm_remove}" = true ]; then
                read -p "Are you sure? (y/n): " answer
                if ! [[ "${answer}" =~ [y|Y] ]]; then
                    echo "Remove operation aborted by user!"
                    exit 1
                fi
            fi
            if ! rm -r /opt/tip-notes; then
                echo "ERROR: failed to remove tip-notes folder!"
                exit 1
            fi
            if ! rm -r /usr/local/bin/tip; then
                echo "ERROR: failed to remove tip-notes link!"
                exit 1
            fi
            exit 0
            ;;
        '--remove-purge')
            error_status=0
            if [ "${tip_confirm_remove_purge}" = true ]; then
                message="Thil will remove all your configuration an notes! "
                message+="Type 'YES' to proceed: "
                read -p "${message}" answer
                if [[ "${answer}" != 'YES' ]]; then
                    echo "Remove operation aborted by user!"
                    exit 1
                fi
            fi
            if ! rm -r /opt/tip-notes; then
                echo "ERROR: failed to remove tip-notes folder!"
                error_status=1
            fi
            if ! rm -r /usr/local/bin/tip; then
                echo "ERROR: failed to remove tip-notes link!"
                error_status=1
            fi
            if ! rm -r ${tip_notes_folder}; then
                echo "ERROR: failed to purge notes folder!"
                error_status=1
            fi
            if ! rm -r ${tip_config_folder}; then
                echo "ERROR: failed to purge config folder!"
                error_status=1
            fi
            exit ${error_status}
            ;;
        '--version')
            echo "${__project_version__}"
            exit 0
            ;;

        *)
            # unknown option
            # save it in an array for later
            POSITIONAL_ARGUMENTS+=("$1")
            shift # past argument
            ;;
    esac
done



# positional parameters are restored AUTOMATICALLY in order to be treated by the
# caller (DO NOT CHANGE BELLOW)
set -- "${POSITIONAL_ARGUMENTS[@]}"




#-------------------------------------------------------------------------------
# MAIN SECTION
#-------------------------------------------------------------------------------
#

# if no arguments list available notes
if [[ "${#}" -eq 0 ]]; then
    ls -p "${tip_notes_folder}" | grep -v / | more
    exit 0
fi

if [[ "${#}" -eq 1 ]]; then
    #cat "${cola_dir}/${1}.txt"
    if [[ -f "${tip_notes_folder}/${1}" ]]; then
        more "${tip_notes_folder}/${1}"
        exit 0
    fi

    echo "no tips for ${1}"
    exit 1
fi

echo "ERROR: Unexpected arguments!"
exit 1
