#!/usr/bin/env bash
#===============================================================================
#
#   DESCRIPTION: terminal notes manager
# 
#         USAGE: ./tip --help
#                
#        AUTHOR: S. Falcao
#       CREATED: 11.07.2020 16:09

#===============================================================================

# Copyright (C) 2020 tip-notes authors.
#
# This file is part of tip-notes.
#
#     tip-notes is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     tip-notes is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with Foobar.  If not, see <https://www.gnu.org/licenses/>



set -o errexit
set -o nounset
set -o pipefail
#set -o xtrace


#-------------------------------------------------------------------------------
# CONFIGURATION SECTION
#-------------------------------------------------------------------------------
#
__script_name__="tip"

__link_dir__="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
__linked_script__=$(readlink "${__link_dir__}/${__script_name__}")
__project_dir__=$(dirname "${__linked_script__}")
cd ${__project_dir__}

source ./project-header.sh

# if exist a config file, source it, otherwise prints an error
# message, unless $1 is --config-init
if [[ -f "${___HEADER___PROJECT_CONFIG_FILE___}" ]]; then
    source "${___HEADER___PROJECT_CONFIG_FILE___}"
else
    if [[ "${#}" -eq 0 ]] || [[ "${1}" != '--init' ]]; then
        echo
        echo "ERROR: --> configuration file does not exist!"
        echo
        echo "To fix it type:"
        echo "tip --init"
        echo
        exit 1
    fi
fi


#-------------------------------------------------------------------------------
# FUNCTIONS
#-------------------------------------------------------------------------------
# use this section to store your functions
#
#

#####
# P #
#####
#

function print_if_not_silenced(){
    if [[ "$FLAG_SILENT" -eq "0" ]] ; then
        echo "$1"
        return "0"
    else
        return "1"
    fi
}


function print_if_verbose(){
    if [[ "$FLAG_VERBOSE" -eq "1" ]] ; then
        echo "$1"
        return 0
    else
        return 1
    fi
}



#-------------------------------------------------------------------------------
# PARSING
#-------------------------------------------------------------------------------
#
POSITIONAL_ARGUMENTS=()


VERBOSE_FLAG=0
SILENT_FLAG=0


while [[ ${#} -gt 0 ]]; do

    arg="$1"

    case ${arg} in
        '-h' | '--help')
            shift # past argument
            echo
            echo \
                "${___HEADER___PROJECT_NAME___} "\
                "${___HEADER___PROJECT_VERSION___}"
            echo
            echo
            echo "USAGE:"
            echo
            echo \
                "${__script_name__}                                    "\
                "list all notes"
            echo \
                "${__script_name__} [<group>]                          "\
                "list all notes within the group"
            echo \
                "${__script_name__} [<group>/]<note>                   "\
                "list specific note"
            echo
            echo \
                "${__script_name__} --config                           "\
                "edit external configuration file"
            echo \
                "${__script_name__} --init                             "\
                "create an external configuration file"
            echo \
                "${__script_name__} --reset                            "\
                "reset external configuration file"
            echo
            echo \
                "${__script_name__} --backup                           "\
                "creates a backup according to tiprc configuration"
            echo \
                "${__script_name__} --backup --all                     "\
                "creates a backup containing notes and configurations"
            echo \
                "${__script_name__} --backup --config-only             "\
                "creates a backup containing configurations"
            echo \
                "${__script_name__} --backup --notes-only              "\
                "creates a backup containing notes"
            echo
            echo \
                "${__script_name__} --edit [<group>/]<note>            "\
                "add/edit note"
            echo \
                "${__script_name__} --delete [<group>/]<note>          "\
                "delete note"
            echo \
                "${__script_name__} --find [<group>] <text>            "\
                "find notes which name contains <text>"
            echo \
                "${__script_name__} --find-content [<group>] <text>    "\
                "find notes which contains <text>"
            echo
            echo \
                "${__script_name__} --remove                           "\
                "remove ${___HEADER___PROJECT_NAME___} from system"
            echo \
                "${__script_name__} --purge                            "\
                "remove ${___HEADER___PROJECT_NAME___} from system including"
            echo "                                       "\
                "configuration files and notes"
            echo
            echo \
                "${__script_name__} --version                          "\
                "shows ${___HEADER___PROJECT_NAME___} version"
            echo \
                "${__script_name__} --authors                          "\
                "shows ${___HEADER___PROJECT_NAME___} authors list"
            echo
            echo
            echo "SHORT FORMS:"
            echo
            echo "-b is same of --backup"
            echo "-d is same of --delete"
            echo "-e is same of --edit"
            echo "-f is same of --find"
            echo "-F is same of --find-content"
            echo "-h is same of --help"
            echo
            echo
            echo \
                "${__script_name__} --help                             "\
                "shows ${___HEADER___PROJECT_NAME___}'s help"
            echo
            exit 0
            ;;
        '-s' | '--silent')
            SILENT_FLAG=1
            shift # past argument
            ;;
        '-v' | '--verbose')
            VERBOSE_FLAG=1
            shift # past argument
            ;;
        '-b' | '--backup')
            shift
            if [[ "${#}" -gt 0 ]]; then
                ./backup ${@}
            else
                ./backup
            fi
            exit 0
            ;;
        '-e' | '--edit')
            shift
            if [[ ${#} -ne 1 ]]; then
                echo "ERROR: --edit option waits for a note name"
                exit 1
            fi
            note_file="${tip_notes_folder}/${1}"

            if [[ -n ${note_file} ]]; then
                mkdir -p $(dirname ${note_file}) && touch ${note_file}
            fi
            if [[ -z "${tip_editor}" ]]; then
                if ! [[ -f "${note_file}" ]]; then
                    touch "${note_file}"
                fi
                xdg-open ${note_file}
            else
                ${tip_editor} "${note_file}"
            fi
            # removes a zero leght file that eventually remains
            if ! [[ -s ${note_file} ]]; then
                rm ${note_file}
            fi
            exit 0
            ;;
        '-d' | '--delete')
            shift
            if [[ ${#} -ne 1 ]]; then
                echo "ERROR: --delete option waits for a note name"
                exit 1
            fi
            note_file="${tip_notes_folder}/${1}"
            if [[ -f "${note_file}" ]]; then
                if [ "${tip_confirm_delete_note}" = true ]; then

                    read -p "Are you sure? (y/n): " answer
                    if ! [[ "${answer}" =~ [y|Y] ]]; then
                        echo "reset operation aborted by user!"
                        exit 1
                    fi

                fi
                rm "${note_file}"
            else
                echo "no ${1} note to be removed!"
                exit 1
            fi
            find "${tip_notes_folder}" -type d -empty -delete
            exit 0
            ;;
        '-F' | '--find-content')
            shift
            if [[ "${#}" -eq 1 ]]; then
                ./find-notes-by-content "${1}"
                exit 0
            elif [[ "${#}" -eq 2 ]]; then
                ./find-notes-by-content "${1}" "${2}"
                exit 0
            fi
            echo "ERROR: --find-content received unexpected number of arguments!"
            echo
            echo "usage:"
            echo "${__script_name__} --find-content [<group>] <text>"
            echo
            echo "[<group>] is optional"
            echo
            exit 1
            ;;
        '-f' | '--find')
            shift
            if [[ "${#}" -eq 1 ]]; then
                ./find-notes-by-name "${1}"
                exit 0
            elif [[ "${#}" -eq 2 ]]; then
                ./find-notes-by-name "${1}" "${2}"
                exit 0
            fi
            echo "ERROR: --find received unexpected number of arguments!"
            echo
            echo "usage:"
            echo "${__script_name__} --find [<group>] <text>"
            echo
            echo "[<group>] is optional"
            echo
            exit 1
            ;;
        '--authors')
            cat ./authors
            exit 0
            ;;
        '--config')
            if [[ -s "${___HEADER___PROJECT_CONFIG_FILE___}" ]]; then
                if [[ -z "${tip_editor}" ]]; then
                    xdg-open ${___HEADER___PROJECT_CONFIG_FILE___}
                else
                    ${tip_editor} "${___HEADER___PROJECT_CONFIG_FILE___}"
                fi
                exit 0
            fi
            echo "ERROR: config file not found! To create a config file type:"
            echo "tip --config-init"
            echo
            exit 1
            ;;
        '--init')
            ./init
            exit 0
            ;;
        '--reset')
            if [ "${tip_confirm_reset}" = true ]; then
                read -p "Are you sure? (y/n): " answer
                if ! [[ "${answer}" =~ [y|Y] ]]; then
                    echo "reset operation aborted by user!"
                    exit 1
                fi
            fi
            rm "${___HEADER___PROJECT_CONFIG_FILE___}"
            ./init
            exit 0
            ;;
        '--remove')
            if [ "${tip_confirm_remove}" = true ]; then
                read -p "Are you sure? (y/n): " answer
                if ! [[ "${answer}" =~ [y|Y] ]]; then
                    echo "remove operation aborted by user!"
                    exit 1
                fi
            fi
            ./remove
            exit 0
            ;;
        '--purge')
            if [ "${tip_confirm_purge}" = true ]; then
                read -p "Are you sure? (y/n): " answer
                if ! [[ "${answer}" =~ [y|Y] ]]; then
                    echo "purge operation aborted by user!"
                    exit 1
                fi
            fi
            ./remove --purge
            exit 0
            ;;
        '--version')
            echo "${___HEADER___PROJECT_VERSION___}"
            exit 0
            ;;

        *)
            # unknown option
            # save it in an array for later
            POSITIONAL_ARGUMENTS+=("$1")
            shift # past argument
            ;;
    esac
done



# positional parameters are restored AUTOMATICALLY in order to be treated by the
# caller (DO NOT CHANGE BELLOW)
set -- "${POSITIONAL_ARGUMENTS[@]}"




#-------------------------------------------------------------------------------
# MAIN SECTION
#-------------------------------------------------------------------------------
#

# if no notes folfer creates one
if ! [[ -d "${tip_notes_folder}" ]]; then
    mkdir "${tip_notes_folder}"
fi

# if no arguments list available notes
if [[ "${#}" -eq 0 ]]; then
    ./list-notes
    exit 0
fi

if [[ "${#}" -eq 1 ]]; then
    if [[ -d "${tip_notes_folder}/${1}" ]]; then
        ./list-notes "${1}"
        exit 0
    elif [[ -f "${tip_notes_folder}/${1}" ]]; then
        more "${tip_notes_folder}/${1}"
        exit 0
    fi

    echo "no tips for ${1}"
    exit 1
fi

echo "ERROR: Unexpected arguments!"
exit 1
