#!/bin/bash
#=============================================================================
#
#   DESCRIPTION:  install tip notes
# 
#         USAGE:  ./install
# 
#        AUTHOR:  S. Falcao
#       CREATED:  11.07.2020 16:09
#
#=============================================================================


script_name="$(basename ${0})"

exit_status=0

# from project-header file
source ./tip-notes/project-header.sh
source ./tip-notes/tip-lib.sh

skip_warning=0

case "${1:-}" in
    '-s' | '--skip')
        skip_warning=1
        shift
        ;;
    '')
        :
        ;;
    *)
        print_error "ERROR: unexpected parameter(s): ${@}"
        exit 1
        ;;
esac

if [[ ${#} -gt 0 ]]; then
    print_error "ERROR: unexpected parameter(s): ${@}"
    exit 1
fi

if [[ "${skip_warning}" -eq 0 ]]; then
    echo
    echo "ATTENTION!"
    echo
    echo \
        "We strongly recommend to always install and remove "\
        "${HEADER___PROJECT_NAME}"
    echo "trough assistance of system packaging manager. Please check README.md"
    echo "installation section to see how to do it!"
    echo
    echo "To ignore this warning and install, type:"
    echo "${script_name} -s"
    echo
    exit 0
fi



# aborts if already installed by apt
if apt list --installed 2> /dev/null | grep 'tip-notes'; then
    echo
    echo\
        "${HEADER___PROJECT_NAME} has already been installed "\
        "using apt system's package manager!"
    echo
    echo "Remove installed version using:"
    echo "sudo apt remove tip-notes"
    echo
    echo "then, call this script again"
    echo
    exit 1
fi


# copy executables
if ! mkdir -p "${HEADER___PROJECT_EXECUTABLES_FOLDER}"; then
    print_error "ERROR: destination folder could not be created"
    exit 1
fi
if ! cp -r ./tip-notes/* "${HEADER___PROJECT_EXECUTABLES_FOLDER}"; then
    print_error "copy executables status --> FAILED"
    exit_status=1
fi

# copy autocompletion files
if ! cp ./autocompletion/tip.bash "${HEADER___PROJECT_AUTOCOMPLETION_FOLDER}"; then
    print_error "copy autocompletion status --> FAILED"
    exit_status=1
fi

# create links to executables
if ! ln -s \
    "${HEADER___PROJECT_EXECUTABLES_FOLDER}/tip" \
    "${HEADER___PROJECT_LINKS_FOLDER}"; then
    print_error "create links status --> FAILED"
    exit_status=1
fi

# create docs
if ! mkdir -p "${HEADER___PROJECT_DOC_FOLDER}"; then
    print_error "create docs folder status --> FAILED"
fi
if ! cp ./packaging/copyright "${HEADER___PROJECT_DOC_FOLDER}"; then
    print_error "copy docs status --> FAILED"
    exit_status=1
fi

# copy man page
if ! cp ./man/tip.1 "${HEADER___PROJECT_MAN_FOLDER}/tip.1"; then
    print_error "copy man page status --> FAILED"
    exit_status=1
fi
if ! gzip -f "${HEADER___PROJECT_MAN_FOLDER}/tip.1"; then
    print_error "compress man page status --> FAILED"
    exit_status=1
fi

# create config files if does not exist
if ! "${HEADER___PROJECT_EXECUTABLES_FOLDER}/init" &> /dev/nul; then
    print_error \
        "create config files status --> FAILED" \
        "(Not a problem if config files already exist!)"
    exit_status=1
fi

exit "${exit_status}"
